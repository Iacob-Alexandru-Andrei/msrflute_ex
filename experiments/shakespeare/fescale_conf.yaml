# Configuration file of FAR training experiment

# ========== Cluster configuration ========== 
# ip address of the parameter server (need 1 GPU process)
ps_ip: localhost  # mauao

# ip address of each worker:# of available gpus process on each gpu in this node
# Note that if we collocate ps and worker on same GPU, then we need to decrease this number of available processes on that GPU by 1
# E.g., master node has 4 available processes, then 1 for the ps, and worker should be set to: worker:3
worker_ips: 
    - localhost:[1,1,1,1] # 4*a40, 44 cpu_cores

## NOTE: list of commands to use
# srun -c 44 -w mauao --gres=gpu:4 --pty bash
# srun -c 44 -w mauao --gres=gpu:a40:4 --pty bash
# source /nfs-share/ls985/anaconda3/bin/activate fedscale-11; export FEDSCALE_HOME=/nfs-share/ls985/FedScale; cd $FEDSCALE_HOME
# python $FEDSCALE_HOME/docker/driver.py start $FEDSCALE_HOME/benchmark/configs/speech/google_speech_1n_1wpg.yml
# python $FEDSCALE_HOME/docker/shutdown.py all

## NOTE: general info
# VRAM used by each executor is 1987 MiB from `nvidia-smi`
# RAM used by each executor is 27.2G (VIRT) 4781M (RES) from `htop`
# server goes to CPU by default
# it takes 5 min per round

exp_path: $FEDSCALE_HOME/fedscale/core

# Entry function of executor and aggregator under $exp_path
executor_entry: execution/executor.py

aggregator_entry: aggregation/aggregator.py

auth:
    ssh_user: ""
    ssh_private_key: ~/.ssh/id_rsa

# cmd to run before we can indeed run FAR (in order)
setup_commands:
    - source /nfs-share/ls985/anaconda3/bin/activate fedscale-11
    - export NCCL_SOCKET_IFNAME='enp1s0f0'         # Run "ifconfig" to ensure the right NIC for nccl if you have multiple NICs

# ========== Additional job configuration ========== 
# Default parameters are specified in config_parser.py, wherein more description of the parameter can be found

job_conf:
    - ps_port: 29502
    - job_name: google_speech                   # Generate logs under this folder: log_path/job_name/time_stamp
    - log_path: $FEDSCALE_HOME/benchmark # Path of log files
    - task: speech
    - num_participants: 100                      # Number of participants per round, we use K=100 in our paper, large K will be much slower
    - data_set: google_speech                     # Dataset: openImg, google_speech, stackoverflow
    - data_dir: /datasets/FedScale/google_speech/google_speech    # Path of the dataset
    - data_map_file: /datasets/FedScale/google_speech/google_speech/client_data_mapping/train.csv              # Allocation of data to each client, turn to iid setting if not provided
    - device_conf_file: $FEDSCALE_HOME/benchmark/dataset/data/device_info/client_device_capacity     # Path of the client trace
    - device_avail_file: $FEDSCALE_HOME/benchmark/dataset/data/device_info/client_behave_trace
    - model: resnet34                            # Models: e.g., shufflenet_v2_x2_0, mobilenet_v2, resnet34, albert-base-v2
    - gradient_policy: yogi                 # {"fed-yogi", "fed-prox", "fed-avg"}, "fed-avg" by default
    - eval_interval: 5002                     # How many rounds to run a testing on the testing set
    - rounds: 100                          # Number of rounds to run this training. We use 1000 in our paper, while it may converge w/ ~400 rounds
    - filter_less: 21                       # Remove clients w/ less than 21 samples
    - num_loaders: 4
    - yogi_eta: 3e-3 
    - yogi_tau: 1e-8
    - local_steps: 30
    - learning_rate: 0.05
    - batch_size: 20
    - test_bsz: 20
